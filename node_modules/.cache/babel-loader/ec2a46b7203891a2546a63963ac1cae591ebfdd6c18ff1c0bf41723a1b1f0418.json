{"ast":null,"code":"var _jsxFileName = \"/Users/song-gayeong/Gayoung/react_simple_diary/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport DiaryEditor from \"./DiaryEditor\";\nimport DiaryList from \"./DiaryList\";\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n/**렌더링이 일어나는 경우 */\n//본인이 가진 state에 변화가 생겼거나\n//부모 컴포넌트가 rerendering이 일어나거나\n//자신이 받은 prop이 변경되는 경우\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState([]);\n  const dataId = useRef(0);\n  const getData = async () => {\n    const res = await fetch(\"https://jsonplaceholder.typicode.com/comments\").then(res => res.json());\n    const initData = res.slice(0, 20).map(it => {\n      return {\n        author: it.email,\n        content: it.body,\n        emotion: Math.floor(Math.random() * 5) + 1,\n        created_date: new Date().getTime(),\n        id: dataId.current++\n      };\n    });\n    setData(initData);\n  };\n  useEffect(() => {\n    getData();\n  }, []);\n\n  /* 생성(추가) */\n  const onCreate = useCallback((author, content, emotion) => {\n    //DiaryEditor컴포넌트에 저장하기 버튼(handleSubmit)이벤트로 author, content, emotion을 받아옴\n    const created_date = new Date().getTime();\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: dataId.current\n    };\n    //새로 생성되는 건 newItem으로 추가됨\n    dataId.current += 1;\n    setData(data => [newItem, ...data]);\n    //최신입력 한 항목이 가장 위로 배치되도록 하기 위해 newItem부터 넣음 (참고로 ...data는 기존에 이미 저장되어 있는 것들)\n  }, []);\n  //onCreate useCallback의 첫번째 인자로 보낸 함수는 작성완료를 눌렀을때 데이터를 추가하는 함수가 됨\n  //dependency array에 빈 배열로 두면 마운트 되는 시점에서 한번만 사용하고 그 뒤로는 만든 함수를 그대로 사용할 수 있도록 함\n  //빈배열로 두면 setData안에 onCreate로 추가되기 이전의 값이 빈배열이므로 리스트를 조회하는 경우 최근 입력한 값 외에는 사라짐(그러니까, ...data의 값이 빈 값으로 들어감)\n  //그래서 setState인 setData에 함수를 넣으면? 함수형 업데이트라고 함 => 항상 최신의 state를 인자를 통해 참고할 수 있게됨(이경우, deps를 비워도 됨)\n\n  /** 삭제 */\n  const onRemove = targetId => {\n    const newDiaryList = data.filter(it => it.id !== targetId);\n    //filter : true면 유지, false면 버림 => true요소들만 모아서 새로운 배열로 반환\n    //targetId랑 같으면(false)이므로 이거는 삭제, 다르면(true)이기 때문에 이것들을 모아서 새로운 배열로 반환하고, newDiaryList에 넣음\n    setData(newDiaryList);\n  };\n\n  /** 수정 */\n  const onEdit = (targetId, newContent) => {\n    //매개변수로 받은건, 수정할 대상 그리고 어떤내용을 변경시킬것인지\n    setData(data.map(it => it.id === targetId ? {\n      ...it,\n      content: newContent\n    } : it));\n    //map으로 돌려서 it(data)에 id가 수정하려는 id(타겟id)와 일치한다면,\n    //it객체를 전부 받아오고, 그 중 content객체의 내용은 newContent(변경시킬 내용)이 되고,\n    //일치하지 않는다면, it(원래 객체에 저장된 데이터)를 반환\n  };\n\n  const goodDiaryAnalysis = useMemo(() => {\n    const goodCount = data.filter(it => it.emotion >= 3).length;\n    const badCount = data.length - goodCount;\n    const goodRatio = goodCount / data.length * 100;\n    return {\n      goodCount,\n      badCount,\n      goodRatio\n    };\n  }, [data.length]);\n  //useMemo는 첫번째 인자를 콜백함수(연산)로 받고, 그 안에 return되는 값을 최적화 하는 기능을 함\n  //dependency array안에 값이 변화할 때만 useMemo안에 있는 연산을 수행\n  const {\n    goodCount,\n    badCount,\n    goodRatio\n  } = goodDiaryAnalysis;\n  //goodDiaryAnalysis는 useMemo를 호출한 것 이므로 함수가 아님 따라서 \"()\"를 붙이지 않고 호출\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(DiaryEditor, {\n      onCreate: onCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\uC804\\uCCB4\\uC77C\\uAE30: \", data.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\uAE30\\uBD84\\uC88B\\uC740 \\uC77C\\uAE30 \\uAC1C\\uC218: \", goodCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\uAE30\\uBD84\\uB098\\uC05C \\uC77C\\uAE30 \\uAC1C\\uC218: \", badCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\uAE30\\uBD84\\uC88B\\uC740 \\uC77C\\uAE30 \\uBE44\\uC728: \", goodRatio]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DiaryList, {\n      onEdit: onEdit,\n      onRemove: onRemove,\n      diaryList: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WAbqqNWcypWuTtPzlHK9fjfckq8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["DiaryEditor","DiaryList","React","useCallback","useEffect","useMemo","useRef","useState","App","data","setData","dataId","getData","res","fetch","then","json","initData","slice","map","it","author","email","content","body","emotion","Math","floor","random","created_date","Date","getTime","id","current","onCreate","newItem","onRemove","targetId","newDiaryList","filter","onEdit","newContent","goodDiaryAnalysis","goodCount","length","badCount","goodRatio"],"sources":["/Users/song-gayeong/Gayoung/react_simple_diary/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport DiaryEditor from \"./DiaryEditor\";\nimport DiaryList from \"./DiaryList\";\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\n/**렌더링이 일어나는 경우 */\n//본인이 가진 state에 변화가 생겼거나\n//부모 컴포넌트가 rerendering이 일어나거나\n//자신이 받은 prop이 변경되는 경우\nfunction App() {\n  const [data, setData] = useState([]);\n\n  const dataId = useRef(0);\n\n  const getData = async () => {\n    const res = await fetch(\n      \"https://jsonplaceholder.typicode.com/comments\"\n    ).then((res) => res.json());\n    const initData = res.slice(0, 20).map((it) => {\n      return {\n        author: it.email,\n        content: it.body,\n        emotion: Math.floor(Math.random() * 5) + 1,\n        created_date: new Date().getTime(),\n        id: dataId.current++,\n      };\n    });\n    setData(initData);\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  /* 생성(추가) */\n  const onCreate = useCallback((author, content, emotion) => {\n    //DiaryEditor컴포넌트에 저장하기 버튼(handleSubmit)이벤트로 author, content, emotion을 받아옴\n    const created_date = new Date().getTime();\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: dataId.current,\n    };\n    //새로 생성되는 건 newItem으로 추가됨\n    dataId.current += 1;\n    setData((data) => [newItem, ...data]);\n    //최신입력 한 항목이 가장 위로 배치되도록 하기 위해 newItem부터 넣음 (참고로 ...data는 기존에 이미 저장되어 있는 것들)\n  }, []);\n  //onCreate useCallback의 첫번째 인자로 보낸 함수는 작성완료를 눌렀을때 데이터를 추가하는 함수가 됨\n  //dependency array에 빈 배열로 두면 마운트 되는 시점에서 한번만 사용하고 그 뒤로는 만든 함수를 그대로 사용할 수 있도록 함\n  //빈배열로 두면 setData안에 onCreate로 추가되기 이전의 값이 빈배열이므로 리스트를 조회하는 경우 최근 입력한 값 외에는 사라짐(그러니까, ...data의 값이 빈 값으로 들어감)\n  //그래서 setState인 setData에 함수를 넣으면? 함수형 업데이트라고 함 => 항상 최신의 state를 인자를 통해 참고할 수 있게됨(이경우, deps를 비워도 됨)\n\n  /** 삭제 */\n  const onRemove = (targetId) => {\n    const newDiaryList = data.filter((it) => it.id !== targetId);\n    //filter : true면 유지, false면 버림 => true요소들만 모아서 새로운 배열로 반환\n    //targetId랑 같으면(false)이므로 이거는 삭제, 다르면(true)이기 때문에 이것들을 모아서 새로운 배열로 반환하고, newDiaryList에 넣음\n    setData(newDiaryList);\n  };\n\n  /** 수정 */\n  const onEdit = (targetId, newContent) => {\n    //매개변수로 받은건, 수정할 대상 그리고 어떤내용을 변경시킬것인지\n    setData(\n      data.map((it) =>\n        it.id === targetId ? { ...it, content: newContent } : it\n      )\n    );\n    //map으로 돌려서 it(data)에 id가 수정하려는 id(타겟id)와 일치한다면,\n    //it객체를 전부 받아오고, 그 중 content객체의 내용은 newContent(변경시킬 내용)이 되고,\n    //일치하지 않는다면, it(원래 객체에 저장된 데이터)를 반환\n  };\n\n  const goodDiaryAnalysis = useMemo(() => {\n    const goodCount = data.filter((it) => it.emotion >= 3).length;\n    const badCount = data.length - goodCount;\n    const goodRatio = (goodCount / data.length) * 100;\n\n    return { goodCount, badCount, goodRatio };\n  }, [data.length]);\n  //useMemo는 첫번째 인자를 콜백함수(연산)로 받고, 그 안에 return되는 값을 최적화 하는 기능을 함\n  //dependency array안에 값이 변화할 때만 useMemo안에 있는 연산을 수행\n  const { goodCount, badCount, goodRatio } = goodDiaryAnalysis;\n  //goodDiaryAnalysis는 useMemo를 호출한 것 이므로 함수가 아님 따라서 \"()\"를 붙이지 않고 호출\n  return (\n    <div className=\"App\">\n      <DiaryEditor onCreate={onCreate} />\n      <div>전체일기: {data.length}</div>\n      <div>기분좋은 일기 개수: {goodCount}</div>\n      <div>기분나쁜 일기 개수: {badCount}</div>\n      <div>기분좋은 일기 비율: {goodRatio}</div>\n      <DiaryList onEdit={onEdit} onRemove={onRemove} diaryList={data} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}