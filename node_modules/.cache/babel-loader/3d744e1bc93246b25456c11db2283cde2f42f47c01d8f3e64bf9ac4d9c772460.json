{"ast":null,"code":"var _jsxFileName = \"/Users/song-gayeong/Gayoung/react_simple_diary/src/Lifecycle.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Lifecycle = () => {\n  _s();\n  /*  \n  const [count, setCount] = useState(0);\n  const [text, setText] = useState(\"\");\n   //dependency array에 있는 값이 변하게 되면 call back함수가 실행됨\n  useEffect(() => {\n    console.log(\"Mount!\");\n  }, []);\n  //update(=rerendering, 1. state가 변하거나, 2. 부모에게서 내려오는 props가 바뀌거나, 3. 부모 component의 rerendering이 되면)하는 순간을 제어하려면 dependency를 안쓰면 됨\n  useEffect(() => {\n    console.log(\"Update!\");\n  });\n   useEffect(() => {\n    console.log(`count is update: ${count}`);\n    if (count > 5) {\n      alert(\"count가 5를 넘었습니다. 1로 초기화 됩니다.\");\n      setCount(1);\n    }\n  }, [count]);\n  //이 경우, count state가 변화하는 순간 콜백함수가 호출 됨\n   useEffect(() => {\n    console.log(`text is update: ${text}`);\n  }, [text]);\n   */\n\n  const [isVisible, setIsVisible] = useState(false);\n  const toggle = () => setIsVisible(!isVisible);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 20\n    },\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggle,\n      children: \"ON/OFF\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(Lifecycle, \"QjDZesRvLCmcrZLxgN677nXnVLA=\");\n_c = Lifecycle;\nexport default Lifecycle;\nvar _c;\n$RefreshReg$(_c, \"Lifecycle\");","map":{"version":3,"names":["React","useEffect","useState","Lifecycle","isVisible","setIsVisible","toggle","padding"],"sources":["/Users/song-gayeong/Gayoung/react_simple_diary/src/Lifecycle.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst Lifecycle = () => {\n  /*  \n  const [count, setCount] = useState(0);\n  const [text, setText] = useState(\"\");\n\n  //dependency array에 있는 값이 변하게 되면 call back함수가 실행됨\n  useEffect(() => {\n    console.log(\"Mount!\");\n  }, []);\n  //update(=rerendering, 1. state가 변하거나, 2. 부모에게서 내려오는 props가 바뀌거나, 3. 부모 component의 rerendering이 되면)하는 순간을 제어하려면 dependency를 안쓰면 됨\n  useEffect(() => {\n    console.log(\"Update!\");\n  });\n\n  useEffect(() => {\n    console.log(`count is update: ${count}`);\n    if (count > 5) {\n      alert(\"count가 5를 넘었습니다. 1로 초기화 됩니다.\");\n      setCount(1);\n    }\n  }, [count]);\n  //이 경우, count state가 변화하는 순간 콜백함수가 호출 됨\n\n  useEffect(() => {\n    console.log(`text is update: ${text}`);\n  }, [text]);\n\n  */\n\n  const [isVisible, setIsVisible] = useState(false);\n  const toggle = () => setIsVisible(!isVisible);\n\n  return (\n    <div style={{ padding: 20 }}>\n      {/* <div>\n        {count}\n        <button onClick={() => setCount(count + 1)}>+</button>\n      </div>\n      <div>\n        <input value={text} onChange={(e) => setText(e.target.value)} />\n      </div> */}\n      <button onClick={toggle}>ON/OFF</button>\n    </div>\n  );\n};\n\nexport default Lifecycle;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAEnD,MAAMC,SAAS,GAAG,MAAM;EAAA;EACtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAME,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGH,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMI,MAAM,GAAG,MAAMD,YAAY,CAAC,CAACD,SAAS,CAAC;EAE7C,oBACE;IAAK,KAAK,EAAE;MAAEG,OAAO,EAAE;IAAG,CAAE;IAAA,uBAQ1B;MAAQ,OAAO,EAAED,MAAO;MAAA,UAAC;IAAM;MAAA;MAAA;MAAA;IAAA;EAAS;IAAA;IAAA;IAAA;EAAA,QACpC;AAEV,CAAC;AAAC,GA5CIH,SAAS;AAAA,KAATA,SAAS;AA8Cf,eAAeA,SAAS;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}