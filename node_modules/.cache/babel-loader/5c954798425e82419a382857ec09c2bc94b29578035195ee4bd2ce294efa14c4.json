{"ast":null,"code":"var _jsxFileName = \"/Users/song-gayeong/Gayoung/react_simple_diary/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport DiaryEditor from \"./DiaryEditor\";\nimport DiaryList from \"./DiaryList\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\n//https://jsonplaceholder.typicode.com/comments\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState([]);\n  const dataId = useRef(0);\n  const getData = async () => {\n    const res = await fetch(\"https://jsonplaceholder.typicode.com/comments\").then(res => res.json());\n    const initData = res.slice(0, 20).map(it => {\n      return {\n        author: it.email,\n        content: it.body,\n        emotion: Math.floor(Math.random() * 5) + 1,\n        created_date: new Date().getTime(),\n        id: dataId.current++\n      };\n    });\n    setData(initData);\n  };\n  useEffect(() => {\n    getData();\n  }, []);\n\n  /* 생성(추가) */\n  const onCreate = (author, content, emotion) => {\n    //DiaryEditor컴포넌트에 저장하기 버튼(handleSubmit)이벤트로 author, content, emotion을 받아옴\n    const created_date = new Date().getTime();\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: dataId.current\n    };\n    //새로 생성되는 건 newItem으로 추가됨\n    dataId.current += 1;\n    setData([newItem, ...data]);\n    //최신입력 한 항목이 가장 위로 배치되도록 하기 위해 newItem부터 넣음 (참고로 ...data는 기존에 이미 저장되어 있는 것들)\n  };\n\n  /** 삭제 */\n  const onRemove = targetId => {\n    console.log(`${targetId}가 삭제되었습니다.`);\n    const newDiaryList = data.filter(it => it.id !== targetId);\n    //filter : true면 유지, false면 버림 => true요소들만 모아서 새로운 배열로 반환\n    //targetId랑 같으면(false)이므로 이거는 삭제, 다르면(true)이기 때문에 이것들을 모아서 새로운 배열로 반환하고, newDiaryList에 넣음\n    setData(newDiaryList);\n  };\n\n  /** 수정 */\n  const onEdit = (targetId, newContent) => {\n    //매개변수로 받은건, 수정할 대상 그리고 어떤내용을 변경시킬것인지\n    setData(data.map(it => it.id === targetId ? {\n      ...it,\n      content: newContent\n    } : it));\n    //map으로 돌려서 it(data)에 id가 수정하려는 id(타겟id)와 일치한다면,\n    //it객체를 전부 받아오고, 그 중 content객체의 내용은 newContent(변경시킬 내용)이 되고,\n    //일치하지 않는다면, it(원래 객체에 저장된 데이터)를 반환\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(DiaryEditor, {\n      onCreate: onCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DiaryList, {\n      onEdit: onEdit,\n      onRemove: onRemove,\n      diaryList: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"2o8Xchl1A9LFe9GiqWSSYkjxPVs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["DiaryEditor","DiaryList","React","useEffect","useRef","useState","App","data","setData","dataId","getData","res","fetch","then","json","initData","slice","map","it","author","email","content","body","emotion","Math","floor","random","created_date","Date","getTime","id","current","onCreate","newItem","onRemove","targetId","console","log","newDiaryList","filter","onEdit","newContent"],"sources":["/Users/song-gayeong/Gayoung/react_simple_diary/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport DiaryEditor from \"./DiaryEditor\";\nimport DiaryList from \"./DiaryList\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\n//https://jsonplaceholder.typicode.com/comments\n\nfunction App() {\n  const [data, setData] = useState([]);\n\n  const dataId = useRef(0);\n\n  const getData = async () => {\n    const res = await fetch(\n      \"https://jsonplaceholder.typicode.com/comments\"\n    ).then((res) => res.json());\n    const initData = res.slice(0, 20).map((it) => {\n      return {\n        author: it.email,\n        content: it.body,\n        emotion: Math.floor(Math.random() * 5) + 1,\n        created_date: new Date().getTime(),\n        id: dataId.current++,\n      };\n    });\n    setData(initData);\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  /* 생성(추가) */\n  const onCreate = (author, content, emotion) => {\n    //DiaryEditor컴포넌트에 저장하기 버튼(handleSubmit)이벤트로 author, content, emotion을 받아옴\n    const created_date = new Date().getTime();\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: dataId.current,\n    };\n    //새로 생성되는 건 newItem으로 추가됨\n    dataId.current += 1;\n    setData([newItem, ...data]);\n    //최신입력 한 항목이 가장 위로 배치되도록 하기 위해 newItem부터 넣음 (참고로 ...data는 기존에 이미 저장되어 있는 것들)\n  };\n\n  /** 삭제 */\n  const onRemove = (targetId) => {\n    console.log(`${targetId}가 삭제되었습니다.`);\n    const newDiaryList = data.filter((it) => it.id !== targetId);\n    //filter : true면 유지, false면 버림 => true요소들만 모아서 새로운 배열로 반환\n    //targetId랑 같으면(false)이므로 이거는 삭제, 다르면(true)이기 때문에 이것들을 모아서 새로운 배열로 반환하고, newDiaryList에 넣음\n    setData(newDiaryList);\n  };\n\n  /** 수정 */\n  const onEdit = (targetId, newContent) => {\n    //매개변수로 받은건, 수정할 대상 그리고 어떤내용을 변경시킬것인지\n    setData(\n      data.map((it) =>\n        it.id === targetId ? { ...it, content: newContent } : it\n      )\n    );\n    //map으로 돌려서 it(data)에 id가 수정하려는 id(타겟id)와 일치한다면,\n    //it객체를 전부 받아오고, 그 중 content객체의 내용은 newContent(변경시킬 내용)이 되고,\n    //일치하지 않는다면, it(원래 객체에 저장된 데이터)를 반환\n  };\n  return (\n    <div className=\"App\">\n      <DiaryEditor onCreate={onCreate} />\n      <DiaryList onEdit={onEdit} onRemove={onRemove} diaryList={data} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,WAAW,MAAM,eAAe;AACvC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;;AAE1D;AAAA;AAEA,SAASC,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGH,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMI,MAAM,GAAGL,MAAM,CAAC,CAAC,CAAC;EAExB,MAAMM,OAAO,GAAG,YAAY;IAC1B,MAAMC,GAAG,GAAG,MAAMC,KAAK,CACrB,+CAA+C,CAChD,CAACC,IAAI,CAAEF,GAAG,IAAKA,GAAG,CAACG,IAAI,EAAE,CAAC;IAC3B,MAAMC,QAAQ,GAAGJ,GAAG,CAACK,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,GAAG,CAAEC,EAAE,IAAK;MAC5C,OAAO;QACLC,MAAM,EAAED,EAAE,CAACE,KAAK;QAChBC,OAAO,EAAEH,EAAE,CAACI,IAAI;QAChBC,OAAO,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC;QAC1CC,YAAY,EAAE,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;QAClCC,EAAE,EAAErB,MAAM,CAACsB,OAAO;MACpB,CAAC;IACH,CAAC,CAAC;IACFvB,OAAO,CAACO,QAAQ,CAAC;EACnB,CAAC;EAEDZ,SAAS,CAAC,MAAM;IACdO,OAAO,EAAE;EACX,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMsB,QAAQ,GAAG,CAACb,MAAM,EAAEE,OAAO,EAAEE,OAAO,KAAK;IAC7C;IACA,MAAMI,YAAY,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;IACzC,MAAMI,OAAO,GAAG;MACdd,MAAM;MACNE,OAAO;MACPE,OAAO;MACPI,YAAY;MACZG,EAAE,EAAErB,MAAM,CAACsB;IACb,CAAC;IACD;IACAtB,MAAM,CAACsB,OAAO,IAAI,CAAC;IACnBvB,OAAO,CAAC,CAACyB,OAAO,EAAE,GAAG1B,IAAI,CAAC,CAAC;IAC3B;EACF,CAAC;;EAED;EACA,MAAM2B,QAAQ,GAAIC,QAAQ,IAAK;IAC7BC,OAAO,CAACC,GAAG,CAAE,GAAEF,QAAS,YAAW,CAAC;IACpC,MAAMG,YAAY,GAAG/B,IAAI,CAACgC,MAAM,CAAErB,EAAE,IAAKA,EAAE,CAACY,EAAE,KAAKK,QAAQ,CAAC;IAC5D;IACA;IACA3B,OAAO,CAAC8B,YAAY,CAAC;EACvB,CAAC;;EAED;EACA,MAAME,MAAM,GAAG,CAACL,QAAQ,EAAEM,UAAU,KAAK;IACvC;IACAjC,OAAO,CACLD,IAAI,CAACU,GAAG,CAAEC,EAAE,IACVA,EAAE,CAACY,EAAE,KAAKK,QAAQ,GAAG;MAAE,GAAGjB,EAAE;MAAEG,OAAO,EAAEoB;IAAW,CAAC,GAAGvB,EAAE,CACzD,CACF;IACD;IACA;IACA;EACF,CAAC;;EACD,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB,QAAC,WAAW;MAAC,QAAQ,EAAEc;IAAS;MAAA;MAAA;MAAA;IAAA,QAAG,eACnC,QAAC,SAAS;MAAC,MAAM,EAAEQ,MAAO;MAAC,QAAQ,EAAEN,QAAS;MAAC,SAAS,EAAE3B;IAAK;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QAC9D;AAEV;AAAC,GArEQD,GAAG;AAAA,KAAHA,GAAG;AAuEZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}